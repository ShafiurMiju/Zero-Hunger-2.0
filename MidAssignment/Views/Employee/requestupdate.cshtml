@model MidAssignment.EF.CollectRequest

@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>requestupdate</title>
    <script src="https://cdn.tailwindcss.com"></script>
</head>
<body>
    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()
        
        <div class="form-horizontal">
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="form-group hidden">
                @Html.LabelFor(model => model.RequestID, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.RequestID, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.RequestID, "", new { @class = "text-danger" })
                </div>
            </div>
    
            <div class="form-group hidden">
                @Html.LabelFor(model => model.RestaurantID, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.RestaurantID, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.RestaurantID, "", new { @class = "text-danger" })
                </div>
            </div>
    
            <div class="form-group hidden">
                @Html.LabelFor(model => model.FoodItemID, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.FoodItemID, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.FoodItemID, "", new { @class = "text-danger" })
                </div>
            </div>
    
            <div class="form-group hidden">
                @Html.LabelFor(model => model.Quantity, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Quantity, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Quantity, "", new { @class = "text-danger" })
                </div>
            </div>
    
            <div class="form-group hidden">
                @Html.LabelFor(model => model.PreserveTime, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.PreserveTime, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.PreserveTime, "", new { @class = "text-danger" })
                </div>
            </div>
    
            <div class="form-group hidden">
                @Html.LabelFor(model => model.ExpiredDate, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.ExpiredDate, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.ExpiredDate, "", new { @class = "text-danger" })
                </div>
            </div>
    
    
            <div class="form-group cursor-pointer bg-green-400 py-2 px-5 rounded inline-block">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Confirm" class="btn btn-default cursor-pointer" />
                </div>
            </div>
        </div>
    }
    
    <div class="bg-red-400 py-2 px-5 rounded inline-block mt-3">
        @Html.ActionLink("No", "Index")
    </div>
</body>
</html>
